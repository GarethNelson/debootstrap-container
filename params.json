{"name":"Debootstrap-container","tagline":"simple way of running multiple debian containers on a (openvz) VPS","body":"debootstrap-container\r\n=====================\r\n\r\n<img src=\"https://raw.githubusercontent.com/coderofsalvation/debootstrap-container/master/.res/logo.png\"/>\r\n\r\nsimple way of running multiple debian ssh-able containers on a (openvz) VPS \r\n\r\n> CAUTION: this shellscript requires root, use at own risk.\r\n\r\n# Usage\r\n\r\n    Usage: \r\n    \r\n    debootstrap-container delete <containername>\r\n    debootstrap-container add <containername> [release] [variant]\r\n    debootstrap-container run <containerdir/name> \r\n    debootstrap-container showreleases\r\n\r\n### Howto\r\n\r\n    $ sudo debootstrap-container add foo\r\n    enter user which should be 'root'? foo \r\n    adding new user 'foo'\r\n    Enter new UNIX password: \r\n    Retype new UNIX password: \r\n    passwd: password updated successfully \r\n    redirect user into container upon ssh-login? (y/n) y\r\n    [x] created container '/srv/containers/foo'\r\n\r\n    $ ssh foo@localhost\r\n    foo@foo# whoami\r\n    uid=1003(foo) gid=1004 groups=1004\r\n\r\n    foo@foo# sudo whoami\r\n    root\r\n\r\n    foo@foo# sudo apt-get install python2\r\n    foo@foo# exit\r\n\r\nnow the funpart is: python2 is only installed in the container, and the sudo is \r\nactually fakeroot.\r\n\r\n### Why\r\n\r\nI am a huge fan of [docker](http://docker.io) but unfortunately I had to do multiple projects inside one VPS server.\r\nI could not get docker working, and solutions like [sekexe](https://github.com/jpetazzo/sekexe) or jailkit pointed into more possible hassle.\r\nI had to go another road to satisfy my needs:\r\n\r\n* I want to install packages in a container, *outside* the real host\r\n* I want to easily backup/restore containers\r\n* I want to run node- or apache/lighttpd applications in a container\r\n* I want to ssh to a container and feel like I have root-access\r\n* I want to be somewhat compatible with docker\r\n* Doesnt use too much diskspace (bare debootstrap container is 124mb)\r\n\r\n### Docker compatibility\r\n\r\nIt *should* be compatible with docker, just tar your jail-dir like so:\r\n\r\n    tar -C /srv/containers/mycontainer -c . | docker import myname/mycontainer\r\n\r\n### TIP: shared directories\r\n\r\nSharing directories across containers (originating from outside the container) can be handy.\r\nHowever, avoid symbolic links since it will confuse applications when resolving absolute paths, instead mount like so:\r\n\r\n    mount --bind /opt/somefolder /srv/containers/mycontainer/opt/somefolder\r\n\r\n> WARNING: always use 'debootstrap-container delete <yourcontainer>' to delete a container.\r\nUsing a plain 'sudo rm -rf /srv/containers/yourcontainer' might cause dataloss for folders using 'mount --bind'\r\n\r\n### TIP: persistent containers\r\n\r\nTo keep the container alive after logouts/timeouts, first get a passwordless ssh-login working:\r\n \r\n    $ su foo\r\n    foo $ ssh-keygen <enter><enter><enter>\r\n    foo $ ssh-copy-id foo@localhost\r\n    foo $ exit\r\n    $ ln -fs /srv/containers/foo/home/foo/.ssh /home/foo/.\r\n\r\nThen: \r\n \r\n* run gnu 'screen' as root (apt-get install screen)\r\n* inside this screen, ssh into your container(s) (ssh foo@localhost)\r\n* and leave it there (ctrl A-D)\r\n\r\nBy doing so, the master-screen process will always be persistent, and you can just ssh from anywhere directly into your ssh-container. You can even run a screen inside your container if you want to.\r\nThe following files would automate this:\r\n\r\n/root/.screen \r\n\r\n    screen -T xterm -t container_foo 1 su foo -c 'ssh foo@localhost'\r\n    screen -T xterm -t container_bar 2 su bar -c 'ssh bar@localhost'\r\n\r\n/etc/init.d/screen \r\n\r\n    #!/bin/bash\r\n    find /srv/containers -mindepth 1 -maxdepth 1 -type d | while read dir; do       \r\n      /root/lemon/server/debootstrap-container/debootstrap-container mount_dirs \"$dir\"\r\n    done\r\n    echo /usr/bin/flock -w 0 /root/.screen.lock /usr/bin/screen -s /bin/bash -d -m &\r\n\r\nThis would mount some needed folders (/sys /proc) and start+detach the screen during startup.\r\nTo start services by default just do something like:\r\n\r\n    echo \"/etc/init.d/mysql status || /etc/init.d/mysql restart\" >> /srv/containers/foo/.bashrc\r\n\r\n### Sudo \r\n\r\nThe containers use a sudo-shellscript at /usr/bin/sudo which uses fakeroot.\r\nTo prevent users from installing software please remove the /usr/bin/fakeroot binary.\r\n\r\n### History\r\n\r\n* Sun Apr 26 21:43:47 CEST 2015 refactor: debootstrap doesnt run by root-user, but with sudo cmds\r\n* Sun Apr 26 21:43:47 CEST 2015 refactor: added remove function \r\n* Mon Apr 27 12:53:50 CEST 2015 refactor: removed import/export: just tar the container at /src/container/*\r\n\r\n### Conclusion\r\n\r\nThis is definately not secure or as cool as docker, but it is an tidy way to deploy\r\napplications on a openvz container (which doesnt run docker).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}