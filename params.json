{"name":"Debootstrap-container","tagline":"simple way of running multiple debian containers on a (openvz) VPS","body":"debootstrap-container\r\n=====================\r\n\r\nsimple way of running multiple debian containers on a (openvz) VPS \r\n\r\n### Howto\r\n\r\n    $ sudo adduser myusername\r\n    $ sudo debootstrap-container add mycontainer\r\n    enter user which should be 'root'? myusername\r\n    redirect user into container upon ssh-login? (y/n) y\r\n    [x] created container '/srv/containers/flop'\r\n    $ ssh myusername@localhost\r\n    root@mycontainer# whoami\r\n    root@mycontainer# root\r\n    root@mycontainer# apt-get install python2\r\n    root@mycontainer# exit\r\n\r\nnow the funpart is: python2 is only installed in the container.\r\nremoving /srv/containers means all packages in the container are removed as well.\r\n\r\nIf you are only interested in local development, you can easily access the container locally as well:\r\n\r\n    $ whoami \r\n    myusername\r\n    $ debootstrap-container run /srv/containers/foo\r\n    root@mycontainer# whoami\r\n    root@mycontainer# root\r\n\r\nOr how about exporting our container to a tarball\r\n\r\n    $ debootstrap-container export /src/containers/mycontainer /tmp/mycontainer.tar.bz2\r\n    [x] analyzing additional installed packages + backing up dirs: srv etc opt\r\n    [x] written /tmp/mycontainer.tar.gz\r\n\r\nOnly the newly installed packagenames + some dirs are in the tar (instead of the whole rootfilesystem).\r\nLets overwrite our container with an exported tarball:\r\n\r\n    $ debootstrap-container import /src/containers/mycontainer /tmp/mycontainer.tar.bz2  # overwrites container\r\n    [x] Reading package lists...\r\n    [x] Building dependency tree...\r\n    [x] The following extra packages will be installed:\r\n    [x] python2 \r\n\r\nOr simple start a fresh container 'mycontainer2' based on our exported tarball:\r\n\r\n    $ debootstrap-container import /src/containers/mycontainer2 /tmp/mycontainer.tar.bz2 # creates clone\r\n    [x] Reading package lists...\r\n    [x] Building dependency tree...\r\n    [x] The following extra packages will be installed:\r\n    [x] python2 \r\n    [x] done\r\n    $ ssh mycontainer2@localhost\r\n    root@mycontainer# whoami (..and so on..)\r\n\r\n### Why\r\n\r\nI am a huge fan of [docker](http://docker.io) but unfortunately I had to do multiple projects inside one VPS server.\r\nI could not get docker working, and solutions like [sekexe](https://github.com/jpetazzo/sekexe) or jailkit pointed into more possible hassle.\r\nI had to go another road to satisfy my needs:\r\n\r\n* I want to install packages in a container, *outside* the real host\r\n* I want to easily import, export, delete containers\r\n* I want to run node- or apache/lighttpd applications in a container\r\n* I want to ssh to a container and feel like I have root-access\r\n* I want to be somewhat compatible with docker\r\n* I want dont want to waste diskspace (bare debootstrap container is 124mb)\r\n\r\n### Docker compatibility\r\n\r\nIt *should* be compatible with docker, just tar your jail-dir like so:\r\n\r\n    tar -C /srv/containers/mycontainer -c . | docker import myname/mycontainer\r\n\r\n### TIP: shared directoreis\r\n\r\nSharing directories across containers (originating from outside the container) can be handy.\r\nHowever, avoid symbolic links since it will confuse applications when resolving absolute paths, instead mount like so:\r\n\r\n    mount --bind /opt/somefolder /srv/containers/mycontainer/opt/somefolder\r\n\r\n### TIP: persistent containers\r\n\r\nYou'll notice that daemons inside containers (like lighttpd or mysql) will eventually die when a user logs off.\r\nThis is why there's the file `/boot.container` (symlink to /etc/rc.local) where you can define daemons.\r\nIts a bit quickndirty but it looks like this:\r\n\r\n    /etc/init.d/lighttpd restart\r\n    /etc/init.d/mysql restart\r\n    \r\n    # quickndirty to let process wait forever\r\n    while true; do sleep 1000000; done\r\n    \r\nThen make sure you run the following (as the container user):\r\n\r\n    $ su myusername -c \"nohup debootstrap-container run /srv/containers/lemon\" &\r\n    $ disown\r\n\r\nDone! now daemons inside your container will stay alive.\r\n\r\n### Conclusion\r\n\r\nThis is definately not secure or as cool as docker, but it is an tidy way to deploy\r\napplications on a openvz container (which doesnt run docker).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}